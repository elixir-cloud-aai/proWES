os:
- linux
dist: bionic
language: minimal

services:
- docker

if: type != pull_request  # do not build anything for PRs

# set global variables
env:
  global:
    - DATA_DIR_TRAVIS="${HOME}/data/pro_wes"
    - ENDPOINT_TRAVIS="http://localhost:7676/ga4gh/wes/v1/runs"
    - ENDPOINT_K8S_PREFIX="https://
    - ENDPOINT_K8S_SUFFIX="/ga4gh/wes/v1/runs"
    - HELM_TIMEOUT="120s"
    - |
      HELM_OPTIONS_COMMON="
            --wait
            --timeout=$HELM_TIMEOUT
      "

# set variables according to branch
before_script:
  - |
    if [ "$TRAVIS_BRANCH" = "dev" ]; then
        export DOCKER_TAG="latest"
        export K8S_USER="prowes-user"
        export K8S_TOKEN="$K8S_PROD_TOKEN"
        export K8S_CLUSTER_NAME="server"
        export K8S_CONTEXT="context"
        export K8S_NAMESPACE="$K8S_PROD_NAMESPACE"
        export HELM_COMMAND="upgrade"
        export HELM_SUFFIX=""
        export HELM_RELEASE="prowes$HELM_SUFFIX"
        export HELM_OPTIONS="
            --set=flower.appName=flower
            --set=prowes.appName=prowes
            --set=prowes.image=$DOCKER_REPO_NAME:$DOCKER_TAG
            --set=celeryWorker.appName=celery-worker
            --set=celeryWorker.image=$DOCKER_REPO_NAME:$DOCKER_TAG
            --set=rabbitmq.appName=rabbitmq
            --set=mongodb.appName=mongodb
        "
        export HELM_CLEANUP="false"
    else
        export DOCKER_TAG=${TRAVIS_BRANCH//_/-}
        export K8S_USER="prowes-user-ci"
        export K8S_TOKEN="$K8S_TOKEN"
        export K8S_CLUSTER_NAME="ci-server"
        export K8S_CONTEXT="ci-context"
        export K8S_NAMESPACE="$K8S_NAMESPACE"
        export HELM_COMMAND="install"
        export HELM_SUFFIX="-$DOCKER_TAG"
        export HELM_RELEASE="prowes$HELM_SUFFIX"
        export HELM_OPTIONS="
            --wait
            --timeout=$HELM_TIMEOUT
            --set=flower.appName=flower-$DOCKER_TAG
            --set=prowes.appName=prowes-$DOCKER_TAG
            --set=prowes.image=$DOCKER_REPO_NAME:$DOCKER_TAG
            --set=celeryWorker.appName=celery-worker-$DOCKER_TAG
            --set=celeryWorker.image=$DOCKER_REPO_NAME:$DOCKER_TAG
            --set=rabbitmq.appName=rabbitmq-$DOCKER_TAG
            --set=mongodb.appName=mongodb-$DOCKER_TAG
            --debug
        "
        export HELM_CLEANUP="true"
    fi

stages:
  - name: build
  - name: deploy

jobs:
  include:
    - stage: build
      name: Build app image and push to Docker registry
      script:
        - docker build -t "$DOCKER_REPO_NAME":"$DOCKER_TAG" .
        - echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push "$DOCKER_REPO_NAME":"$DOCKER_TAG"
        - rm ${HOME}/.docker/config.json  # delete token
    - stage: build
      name: Build, deploy and test application locally with docker-compose
      script:
        - mkdir -p ${DATA_DIR_TRAVIS}/{db,specs}  # create data directories
        - docker-compose up -d --build
        - sleep 30  # wait for services to start up
        - |
          test $( \
              curl \
                  -sL \
                  -o /dev/null \
                  -w '%{http_code}' \
                  -X GET \
                  --header='Accept: application/json' \
                  "$ENDPOINT_TRAVIS" \
          ) == '200'
        - docker-compose down
    - stage: deploy
      name: Deploy on Kubernetes
      script:
        # install dependencies
        - |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.3/bin/linux/amd64/kubectl \
          && chmod +x kubectl \
          && sudo mv kubectl /usr/local/bin/
        - |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 \
              > get_helm.sh \
          && chmod 700 get_helm.sh \
          && ./get_helm.sh
        # configure k8s
        - |
          kubectl config set-credentials $K8S_USER \
              --token=$K8S_TOKEN \
          && kubectl config set-cluster $K8S_CLUSTER_NAME \
              --server=$K8S_CLUSTER \
          && kubectl config set-context $K8S_CONTEXT \
              --user=$K8S_USER \
              --namespace=$K8S_NAMESPACE \
              --cluster=$K8S_CLUSTER_NAME \
          && kubectl config use-context $K8S_CONTEXT
        # install or upgrade app
        - helm $HELM_COMMAND $HELM_RELEASE deployment $HELM_OPTIONS_COMMON $HELM_OPTIONS
        # test endpoint
        - |
          export URL=$(kubectl get route -l app=$HELM_RELEASE -o=jsonpath='{.items[0].spec.host}') \
          && echo $URL
        - |
          test $( \
              curl \
                  -sL \
                  -o /dev/null \
                  -w '%{http_code}' \
                  -X GET \
                  --header='Accept: application/json' \
                  "${ENDPOINT_K8S_PREFIX}${URL}${ENDPOINT_K8S_SUFFIX}" \
          ) == '200'
        # clean up
        - |
          if [ "$HELM_CLEANUP" = "true" ]; then
              helm delete $HELM_RELEASE
          fi
