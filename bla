[2023-11-05 21:59:26,237: INFO    ] Log formatting configured. [foca.foca]
[2023-11-05 21:59:26,237: INFO    ] Configuration file '/app/pro_wes/config.yaml' parsed. [foca.foca]
[2023-11-05 21:59:26,320: INFO    ] Connexion app created. [foca.foca]
[2023-11-05 21:59:26,320: INFO    ] Error handler registered. [foca.foca]
[2023-11-05 21:59:26,320: INFO    ] CORS enabled. [foca.foca]
[2023-11-05 21:59:26,893: INFO    ] Log formatting configured. [foca.foca]
[2023-11-05 21:59:26,893: INFO    ] Configuration file '/app/pro_wes/config.yaml' parsed. [foca.foca]
[2023-11-05 21:59:27,067: INFO    ] Connexion app created. [foca.foca]
[2023-11-05 21:59:27,068: INFO    ] Error handler registered. [foca.foca]
[2023-11-05 21:59:27,068: INFO    ] Registered database 'runStore' at URI 'mongodb':'27017' with Flask application. [foca.database.register_mongodb]
[2023-11-05 21:59:27,069: INFO    ] Added database collection 'runs'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,085: INFO    ] Indexes created for collection 'runs'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,085: INFO    ] Added database collection 'service_info'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,101: INFO    ] Indexes created for collection 'service_info'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,102: INFO    ] Database registered. [foca.foca]
[2023-11-05 21:59:27,291: INFO    ] Support for background tasks set up. [foca.foca]
[2023-11-05 21:59:27,306: INFO    ] API endpoints added from spec: /app/pro_wes/api/20201124.tag_1_0_1.workflow_execution_service.openapi.modified.yaml [foca.api.register_openapi]
[2023-11-05 21:59:27,307: INFO    ] Registered database 'runStore' at URI 'mongodb':'27017' with Flask application. [foca.database.register_mongodb]
[2023-11-05 21:59:27,307: INFO    ] Added database collection 'runs'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,318: INFO    ] Indexes created for collection 'runs'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,318: INFO    ] Added database collection 'service_info'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,329: INFO    ] Indexes created for collection 'service_info'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,329: INFO    ] Database registered. [foca.foca]
[2023-11-05 21:59:27,330: INFO    ] Registered database 'access_control_db' at URI 'mongodb':'27017' with Flask application. [foca.database.register_mongodb]
[2023-11-05 21:59:27,330: INFO    ] Added database collection 'policy_rules'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,331: INFO    ] Setting casbin model. [foca.security.access_control.register_access_control]
[2023-11-05 21:59:27,331: INFO    ] Setting headers for owner operations. [foca.security.access_control.register_access_control]
[2023-11-05 21:59:27,331: INFO    ] Setting headers for user operations. [foca.security.access_control.register_access_control]
[2023-11-05 21:59:27,331: INFO    ] Setting up casbin enforcer. [foca.security.access_control.register_access_control]
[2023-11-05 21:59:27 +0000] [7] [INFO] Starting gunicorn 20.1.0
[2023-11-05 21:59:27 +0000] [7] [INFO] Listening at: http://0.0.0.0:8080 (7)
[2023-11-05 21:59:27 +0000] [7] [INFO] Using worker: sync
[2023-11-05 21:59:27 +0000] [15] [INFO] Booting worker with pid: 15
[2023-11-05 21:59:27,456: INFO    ] Log formatting configured. [foca.foca]
[2023-11-05 21:59:27,456: INFO    ] Configuration file '/app/pro_wes/config.yaml' parsed. [foca.foca]
[2023-11-05 21:59:27,497: INFO    ] Connexion app created. [foca.foca]
[2023-11-05 21:59:27,497: INFO    ] Error handler registered. [foca.foca]
[2023-11-05 21:59:27,497: INFO    ] CORS enabled. [foca.foca]
[2023-11-05 21:59:27,973: INFO    ] API endpoints added from spec: /app/pro_wes/api/20201124.tag_1_0_1.workflow_execution_service.openapi.modified.yaml [foca.api.register_openapi]
[2023-11-05 21:59:27,974: INFO    ] Registered database 'runStore' at URI 'mongodb':'27017' with Flask application. [foca.database.register_mongodb]
[2023-11-05 21:59:27,974: INFO    ] Added database collection 'runs'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,991: INFO    ] Indexes created for collection 'runs'. [foca.database.register_mongodb]
[2023-11-05 21:59:27,992: INFO    ] Added database collection 'service_info'. [foca.database.register_mongodb]
[2023-11-05 21:59:28,004: INFO    ] Indexes created for collection 'service_info'. [foca.database.register_mongodb]
[2023-11-05 21:59:28,005: INFO    ] Database registered. [foca.foca]
[2023-11-05 21:59:28,006: INFO    ] Registered database 'runStore' at URI 'mongodb':'27017' with Flask application. [foca.database.register_mongodb]
[2023-11-05 21:59:28,006: INFO    ] Added database collection 'policy_rules'. [foca.database.register_mongodb]
[2023-11-05 21:59:28,006: INFO    ] Setting casbin model. [foca.security.access_control.register_access_control]
[2023-11-05 21:59:28,006: INFO    ] Setting headers for owner operations. [foca.security.access_control.register_access_control]
[2023-11-05 21:59:28,006: INFO    ] Setting headers for user operations. [foca.security.access_control.register_access_control]
[2023-11-05 21:59:28,006: INFO    ] Setting up casbin enforcer. [foca.security.access_control.register_access_control]
[2023-11-05 22:00:58 +0000] [7] [CRITICAL] WORKER TIMEOUT (pid:15)
[2023-11-05 22:00:58 +0000] [15] [INFO] Worker exiting (pid: 15)
[2023-11-05 22:00:58 +0000] [21] [INFO] Booting worker with pid: 21
[2023-11-05 22:00:59,007: INFO    ] Log formatting configured. [foca.foca]
[2023-11-05 22:00:59,007: INFO    ] Configuration file '/app/pro_wes/config.yaml' parsed. [foca.foca]
[2023-11-05 22:00:59,059: INFO    ] Connexion app created. [foca.foca]
[2023-11-05 22:00:59,059: INFO    ] Error handler registered. [foca.foca]
[2023-11-05 22:00:59,059: INFO    ] CORS enabled. [foca.foca]
[2023-11-05 22:00:59,584: INFO    ] API endpoints added from spec: /app/pro_wes/api/20201124.tag_1_0_1.workflow_execution_service.openapi.modified.yaml [foca.api.register_openapi]
[2023-11-05 22:00:59,585: INFO    ] Registered database 'runStore' at URI 'mongodb':'27017' with Flask application. [foca.database.register_mongodb]
[2023-11-05 22:00:59,585: INFO    ] Added database collection 'runs'. [foca.database.register_mongodb]
[2023-11-05 22:00:59,604: INFO    ] Indexes created for collection 'runs'. [foca.database.register_mongodb]
[2023-11-05 22:00:59,604: INFO    ] Added database collection 'service_info'. [foca.database.register_mongodb]
[2023-11-05 22:00:59,618: INFO    ] Indexes created for collection 'service_info'. [foca.database.register_mongodb]
[2023-11-05 22:00:59,619: INFO    ] Database registered. [foca.foca]
[2023-11-05 22:00:59,620: INFO    ] Registered database 'runStore' at URI 'mongodb':'27017' with Flask application. [foca.database.register_mongodb]
[2023-11-05 22:00:59,620: INFO    ] Added database collection 'policy_rules'. [foca.database.register_mongodb]
[2023-11-05 22:00:59,620: INFO    ] Setting casbin model. [foca.security.access_control.register_access_control]
[2023-11-05 22:00:59,621: INFO    ] Setting headers for owner operations. [foca.security.access_control.register_access_control]
[2023-11-05 22:00:59,621: INFO    ] Setting headers for user operations. [foca.security.access_control.register_access_control]
[2023-11-05 22:00:59,621: INFO    ] Setting up casbin enforcer. [foca.security.access_control.register_access_control]
[2023-11-05 22:28:18,324: ERROR   ] http://localhost:8090/ga4gh/wes/v1/service-info validation error: 'name' is a required property [connexion.decorators.validation]
[2023-11-05 22:28:18,324: ERROR   ] {'message': 'The request is malformed.', 'code': '400'} [foca.errors.exceptions]
[2023-11-05 22:28:18,330: ERROR   ] Traceback (most recent call last):\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/validation.py", line 213, in validate_schema\n    self.validator.validate(data)\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/validators.py", line 435, in validate\n    raise error\njsonschema.exceptions.ValidationError: 'name' is a required property\n\nFailed validating 'required' in schema['allOf'][0]:\n    {'description': 'GA4GH service',\n     'properties': {'contactUrl': {'description': 'URL of the contact for '\n                                                  'the provider of this '\n                                                  'service, e.g. a link to '\n                                                  'a contact form (RFC '\n                                                  '3986 format), or an '\n                                                  'email (RFC 2368 '\n                                                  'format).',\n                                   'example': 'mailto:support@example.com',\n                                   'format': 'uri',\n                                   'type': 'string'},\n                    'createdAt': {'description': 'Timestamp describing '\n                                                 'when the service was '\n                                                 'first deployed and '\n                                                 'available (RFC 3339 '\n                                                 'format)',\n                                  'example': '2019-06-04T12:58:19Z',\n                                  'format': 'date-time',\n                                  'type': 'string'},\n                    'description': {'description': 'Description of the '\n                                                   'service. Should be '\n                                                   'human readable and '\n                                                   'provide information '\n                                                   'about the service.',\n                                    'example': 'This service provides...',\n                                    'type': 'string'},\n                    'documentationUrl': {'description': 'URL of the '\n                                                        'documentation of '\n                                                        'this service (RFC '\n                                                        '3986 format). '\n                                                        'This should help '\n                                                        'someone learn how '\n                                                        'to use your '\n                                                        'service, '\n                                                        'including any '\n                                                        'specifics '\n                                                        'required to '\n                                                        'access data, e.g. '\n                                                        'authentication.',\n                                         'example': 'https://docs.myservice.example.com',\n                                         'format': 'uri',\n                                         'type': 'string'},\n                    'environment': {'description': 'Environment the '\n                                                   'service is running in. '\n                                                   'Use this to '\n                                                   'distinguish between '\n                                                   'production, '\n                                                   'development and '\n                                                   'testing/staging '\n                                                   'deployments. Suggested '\n                                                   'values are prod, test, '\n                                                   'dev, staging. However '\n                                                   'this is advised and '\n                                                   'not enforced.',\n                                    'example': 'test',\n                                    'type': 'string'},\n                    'id': {'description': 'Unique ID of this service. '\n                                          'Reverse domain name notation is '\n                                          'recommended, though not '\n                                          'required. The identifier should '\n                                          'attempt to be globally unique '\n                                          'so it can be used in downstream '\n                                          'aggregator services e.g. '\n                                          'Service Registry.',\n                           'example': 'org.ga4gh.myservice',\n                           'type': 'string'},\n                    'name': {'description': 'Name of this service. Should '\n                                            'be human readable.',\n                             'example': 'My project',\n                             'type': 'string'},\n                    'organization': {'description': 'Organization '\n                                                    'providing the service',\n                                     'properties': {'name': {'description': 'Name '\n                                                                            'of '\n                                                                            'the '\n                                                                            'organization '\n                                                                            'responsible '\n                                                                            'for '\n                                                                            'the '\n                                                                            'service',\n                                                             'example': 'My '\n                                                                        'organization',\n                                                             'type': 'string'},\n                                                    'url': {'description': 'URL '\n                                                                           'of '\n                                                                           'the '\n                                                                           'website '\n                                                                           'of '\n                                                                           'the '\n                                                                           'organization '\n                                                                           '(RFC '\n                                                                           '3986 '\n                                                                           'format)',\n                                                            'example': 'https://example.com',\n                                                            'format': 'uri',\n                                                            'type': 'string'}},\n                                     'required': ['name', 'url'],\n                                     'type': 'object'},\n                    'type': {'$ref': '#/components/schemas/ServiceType'},\n                    'updatedAt': {'description': 'Timestamp describing '\n                                                 'when the service was '\n                                                 'last updated (RFC 3339 '\n                                                 'format)',\n                                  'example': '2019-06-04T12:58:19Z',\n                                  'format': 'date-time',\n                                  'type': 'string'},\n                    'version': {'description': 'Version of the service '\n                                               'being described. Semantic '\n                                               'versioning is recommended, '\n                                               'but other identifiers, '\n                                               'such as dates or commit '\n                                               'hashes, are also allowed. '\n                                               'The version should be '\n                                               'changed whenever the '\n                                               'service is updated.',\n                                'example': '1.0.0',\n                                'type': 'string'}},\n     'required': ['id', 'name', 'type', 'organization', 'version'],\n     'type': 'object'}\n\nOn instance:\n    {'id': 'org.ga4gh.myservice'}\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.10/site-packages/flask/app.py", line 1823, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "/usr/local/lib/python3.10/site-packages/flask/app.py", line 1799, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/decorator.py", line 68, in wrapper\n    response = function(request)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/uri_parsing.py", line 149, in wrapper\n    response = function(request)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/validation.py", line 170, in wrapper\n    self.validate_schema(data, request.url)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/validation.py", line 221, in validate_schema\n    raise BadRequestProblem(detail="{message}{error_path_msg}".format(\nconnexion.exceptions.BadRequestProblem [foca.errors.exceptions]
[2023-11-05 22:28:45,781: ERROR   ] http://localhost:8090/ga4gh/wes/v1/service-info validation error: 'type' is a required property [connexion.decorators.validation]
[2023-11-05 22:28:45,781: ERROR   ] {'message': 'The request is malformed.', 'code': '400'} [foca.errors.exceptions]
[2023-11-05 22:28:45,787: ERROR   ] Traceback (most recent call last):\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/validation.py", line 213, in validate_schema\n    self.validator.validate(data)\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/validators.py", line 435, in validate\n    raise error\njsonschema.exceptions.ValidationError: 'type' is a required property\n\nFailed validating 'required' in schema['allOf'][0]:\n    {'description': 'GA4GH service',\n     'properties': {'contactUrl': {'description': 'URL of the contact for '\n                                                  'the provider of this '\n                                                  'service, e.g. a link to '\n                                                  'a contact form (RFC '\n                                                  '3986 format), or an '\n                                                  'email (RFC 2368 '\n                                                  'format).',\n                                   'example': 'mailto:support@example.com',\n                                   'format': 'uri',\n                                   'type': 'string'},\n                    'createdAt': {'description': 'Timestamp describing '\n                                                 'when the service was '\n                                                 'first deployed and '\n                                                 'available (RFC 3339 '\n                                                 'format)',\n                                  'example': '2019-06-04T12:58:19Z',\n                                  'format': 'date-time',\n                                  'type': 'string'},\n                    'description': {'description': 'Description of the '\n                                                   'service. Should be '\n                                                   'human readable and '\n                                                   'provide information '\n                                                   'about the service.',\n                                    'example': 'This service provides...',\n                                    'type': 'string'},\n                    'documentationUrl': {'description': 'URL of the '\n                                                        'documentation of '\n                                                        'this service (RFC '\n                                                        '3986 format). '\n                                                        'This should help '\n                                                        'someone learn how '\n                                                        'to use your '\n                                                        'service, '\n                                                        'including any '\n                                                        'specifics '\n                                                        'required to '\n                                                        'access data, e.g. '\n                                                        'authentication.',\n                                         'example': 'https://docs.myservice.example.com',\n                                         'format': 'uri',\n                                         'type': 'string'},\n                    'environment': {'description': 'Environment the '\n                                                   'service is running in. '\n                                                   'Use this to '\n                                                   'distinguish between '\n                                                   'production, '\n                                                   'development and '\n                                                   'testing/staging '\n                                                   'deployments. Suggested '\n                                                   'values are prod, test, '\n                                                   'dev, staging. However '\n                                                   'this is advised and '\n                                                   'not enforced.',\n                                    'example': 'test',\n                                    'type': 'string'},\n                    'id': {'description': 'Unique ID of this service. '\n                                          'Reverse domain name notation is '\n                                          'recommended, though not '\n                                          'required. The identifier should '\n                                          'attempt to be globally unique '\n                                          'so it can be used in downstream '\n                                          'aggregator services e.g. '\n                                          'Service Registry.',\n                           'example': 'org.ga4gh.myservice',\n                           'type': 'string'},\n                    'name': {'description': 'Name of this service. Should '\n                                            'be human readable.',\n                             'example': 'My project',\n                             'type': 'string'},\n                    'organization': {'description': 'Organization '\n                                                    'providing the service',\n                                     'properties': {'name': {'description': 'Name '\n                                                                            'of '\n                                                                            'the '\n                                                                            'organization '\n                                                                            'responsible '\n                                                                            'for '\n                                                                            'the '\n                                                                            'service',\n                                                             'example': 'My '\n                                                                        'organization',\n                                                             'type': 'string'},\n                                                    'url': {'description': 'URL '\n                                                                           'of '\n                                                                           'the '\n                                                                           'website '\n                                                                           'of '\n                                                                           'the '\n                                                                           'organization '\n                                                                           '(RFC '\n                                                                           '3986 '\n                                                                           'format)',\n                                                            'example': 'https://example.com',\n                                                            'format': 'uri',\n                                                            'type': 'string'}},\n                                     'required': ['name', 'url'],\n                                     'type': 'object'},\n                    'type': {'$ref': '#/components/schemas/ServiceType'},\n                    'updatedAt': {'description': 'Timestamp describing '\n                                                 'when the service was '\n                                                 'last updated (RFC 3339 '\n                                                 'format)',\n                                  'example': '2019-06-04T12:58:19Z',\n                                  'format': 'date-time',\n                                  'type': 'string'},\n                    'version': {'description': 'Version of the service '\n                                               'being described. Semantic '\n                                               'versioning is recommended, '\n                                               'but other identifiers, '\n                                               'such as dates or commit '\n                                               'hashes, are also allowed. '\n                                               'The version should be '\n                                               'changed whenever the '\n                                               'service is updated.',\n                                'example': '1.0.0',\n                                'type': 'string'}},\n     'required': ['id', 'name', 'type', 'organization', 'version'],\n     'type': 'object'}\n\nOn instance:\n    {'auth_instructions_url': 'string',\n     'contactUrl': 'mailto:support@example.com',\n     'createdAt': '2019-06-04T12:58:19Z',\n     'default_workflow_engine_parameters': [{'default_value': 'string',\n                                             'name': 'string',\n                                             'type': 'string'}],\n     'description': 'This service provides...',\n     'documentationUrl': 'https://docs.myservice.example.com',\n     'environment': 'test',\n     'id': 'org.ga4gh.myservice',\n     'name': 'My project',\n     'organization': {'name': 'My organization',\n                      'url': 'https://example.com'},\n     'supported_filesystem_protocols': ['string'],\n     'supported_wes_versions': ['string'],\n     'tags': {'additionalProp1': 'string',\n              'additionalProp2': 'string',\n              'additionalProp3': 'string'},\n     'updatedAt': '2019-06-04T12:58:19Z',\n     'version': '1.0.0',\n     'workflow_engine_versions': {'additionalProp1': 'string',\n                                  'additionalProp2': 'string',\n                                  'additionalProp3': 'string'},\n     'workflow_type_versions': {'additionalProp1': {'workflow_type_version': ['string']},\n                                'additionalProp2': {'workflow_type_version': ['string']},\n                                'additionalProp3': {'workflow_type_version': ['string']}}}\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.10/site-packages/flask/app.py", line 1823, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "/usr/local/lib/python3.10/site-packages/flask/app.py", line 1799, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/decorator.py", line 68, in wrapper\n    response = function(request)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/uri_parsing.py", line 149, in wrapper\n    response = function(request)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/validation.py", line 170, in wrapper\n    self.validate_schema(data, request.url)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/validation.py", line 221, in validate_schema\n    raise BadRequestProblem(detail="{message}{error_path_msg}".format(\nconnexion.exceptions.BadRequestProblem [foca.errors.exceptions]
[2023-11-05 22:29:31,218: ERROR   ] {'message': 'An unexpected error occurred.', 'code': '500'} [foca.errors.exceptions]
[2023-11-05 22:29:31,220: ERROR   ] Traceback (most recent call last):\n  File "/usr/local/lib/python3.10/site-packages/referencing/_core.py", line 186, in pointer\n    contents = contents[segment]  # type: ignore[reportUnknownArgumentType]  # noqa: E501\nKeyError: 'ServiceType'\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/validators.py", line 446, in _validate_reference\n    resolved = self._resolver.lookup(ref)\n  File "/usr/local/lib/python3.10/site-packages/referencing/_core.py", line 594, in lookup\n    return retrieved.value.pointer(pointer=fragment, resolver=resolver)\n  File "/usr/local/lib/python3.10/site-packages/referencing/_core.py", line 188, in pointer\n    raise exceptions.PointerToNowhere(ref=pointer, resource=self)\nreferencing.exceptions.PointerToNowhere: '/components/schemas/ServiceType' does not exist within {'x-body-name': 'service_info', 'allOf': [{'description': 'GA4GH service', 'type': 'object', 'required': ['id', 'name', 'type', 'organization', 'version'], 'properties': {'id': {'type': 'string', 'description': 'Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.', 'example': 'org.ga4gh.myservice'}, 'name': {'type': 'string', 'description': 'Name of this service. Should be human readable.', 'example': 'My project'}, 'type': {'$ref': '#/components/schemas/ServiceType'}, 'description': {'type': 'string', 'description': 'Description of the service. Should be human readable and provide information about the service.', 'example': 'This service provides...'}, 'organization': {'type': 'object', 'description': 'Organization providing the service', 'required': ['name', 'url'], 'properties': {'name': {'type': 'string', 'description': 'Name of the organization responsible for the service', 'example': 'My organization'}, 'url': {'type': 'string', 'format': 'uri', 'description': 'URL of the website of the organization (RFC 3986 format)', 'example': 'https://example.com'}}}, 'contactUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).', 'example': 'mailto:support@example.com'}, 'documentationUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.', 'example': 'https://docs.myservice.example.com'}, 'createdAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was first deployed and available (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'updatedAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was last updated (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'environment': {'type': 'string', 'description': 'Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.', 'example': 'test'}, 'version': {'type': 'string', 'description': 'Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.', 'example': '1.0.0'}}}, {'properties': {'auth_instructions_url': {'description': 'A web page URL with human-readable instructions on how to get an authorization token for use with a specific WES endpoint.', 'type': 'string'}, 'default_workflow_engine_parameters': {'description': 'Each workflow engine can present additional parameters that can be sent to the workflow engine. This message will list the default values, and their types for each workflow engine.', 'items': {'description': 'A message that allows one to describe default parameters for a workflow engine.', 'properties': {'default_value': {'description': 'The stringified version of the default parameter. e.g. "2.45".', 'type': 'string'}, 'name': {'description': 'The name of the parameter', 'type': 'string'}, 'type': {'description': 'Describes the type of the parameter, e.g. float.', 'type': 'string'}}, 'title': 'DefaultWorkflowEngineParameter', 'type': 'object'}, 'type': 'array'}, 'supported_filesystem_protocols': {'description': "The filesystem protocols supported by this service, currently these may include common protocols using the terms 'http', 'https', 'sftp', 's3', 'gs', 'file', or 'synapse', but others  are possible and the terms beyond these core protocols are currently not fixed.   This section reports those protocols (either common or not) supported by this WES service.", 'items': {'type': 'string'}, 'type': 'array'}, 'supported_wes_versions': {'description': 'The version(s) of the WES schema supported by this service', 'items': {'type': 'string'}, 'type': 'array'}, 'tags': {'additionalProperties': {'description': 'A message containing useful information about the running service, including supported versions and default settings.', 'type': 'string'}, 'type': 'object'}, 'workflow_engine_versions': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_type_versions': {'additionalProperties': {'description': 'Available workflow types supported by a given instance of the service.', 'properties': {'workflow_type_version': {'description': 'an array of one or more acceptable types for the `workflow_type`', 'items': {'type': 'string'}, 'type': 'array'}}, 'title': 'WorkflowTypeVersion', 'type': 'object'}, 'type': 'object'}}, 'required': ['workflow_type_versions', 'supported_wes_versions', 'supported_filesystem_protocols', 'workflow_engine_versions', 'default_workflow_engine_parameters', 'auth_instructions_url', 'tags'], 'type': 'object'}], 'title': 'ServiceInfoRegister', 'components': {'schemas': {'DefaultWorkflowEngineParameter': {'description': 'A message that allows one to describe default parameters for a workflow engine.', 'properties': {'default_value': {'description': 'The stringified version of the default parameter. e.g. "2.45".', 'type': 'string'}, 'name': {'description': 'The name of the parameter', 'type': 'string'}, 'type': {'description': 'Describes the type of the parameter, e.g. float.', 'type': 'string'}}, 'title': 'DefaultWorkflowEngineParameter', 'type': 'object'}, 'ErrorResponse': {'description': 'An object that can optionally include information about the error.', 'properties': {'msg': {'description': 'A detailed error message.', 'type': 'string'}, 'status_code': {'description': 'The integer representing the HTTP status code (e.g. 200, 404).', 'format': 'int32', 'type': 'integer'}}, 'title': 'ErrorResponse', 'type': 'object'}, 'Log': {'description': 'Log and other info', 'properties': {'cmd': {'description': 'The command line that was executed', 'items': {'type': 'string'}, 'type': 'array'}, 'end_time': {'description': 'When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'exit_code': {'description': 'Exit code of the program', 'format': 'int32', 'type': 'integer'}, 'name': {'description': 'The task or workflow name', 'type': 'string'}, 'start_time': {'description': 'When the command started executing, in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'stderr': {'description': 'A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}, 'stdout': {'description': 'A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}}, 'title': 'Log', 'type': 'object'}, 'RunId': {'properties': {'run_id': {'description': 'workflow run ID', 'type': 'string'}}, 'title': 'RunId', 'type': 'object'}, 'RunListResponse': {'description': 'The service will return a RunListResponse when receiving a successful RunListRequest.', 'properties': {'next_page_token': {'description': 'A token which may be supplied as `page_token` in workflow run list request to get the next page of results.  An empty string indicates there are no more items to return.', 'type': 'string'}, 'runs': {'description': 'A list of workflow runs that the service has executed or is executing. The list is filtered to only include runs that the caller has permission to see.', 'items': {'description': 'Small description of a workflow run, returned by server during listing', 'properties': {'run_id': {'type': 'string'}, 'state': {'description': "- UNKNOWN: The state of the task is unknown. This provides a safe default for messages where this field is missing, for example, so that a missing field does not accidentally imply that the state is QUEUED.\n\n\n - QUEUED: The task is queued.\n\n\n- INITIALIZING: The task has been assigned to a worker and is currently preparing to run. For example, the worker may be turning on, downloading input files, etc.\n\n- RUNNING: The task is running. Input files are downloaded and the first Executor has been started.\n\n- PAUSED: The task is paused. An implementation may have the ability to pause a task, but this is not required.\n\n\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n\n\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n\n\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out of disk space, etc.\n\n\n - CANCELED: The task was canceled by the user.\n\n\n  - CANCELING: The task was canceled by the user, and is in the process of stopping.", 'enum': ['UNKNOWN', 'QUEUED', 'INITIALIZING', 'RUNNING', 'PAUSED', 'COMPLETE', 'EXECUTOR_ERROR', 'SYSTEM_ERROR', 'CANCELED', 'CANCELING'], 'title': 'State', 'type': 'string'}}, 'required': ['run_id'], 'title': 'RunStatus', 'type': 'object'}, 'type': 'array'}}, 'title': 'RunListResponse', 'type': 'object'}, 'RunLog': {'properties': {'outputs': {'description': 'The outputs from the workflow run.', 'type': 'object'}, 'request': {'description': 'To execute a workflow, send a run request including all the details needed to begin downloading\nand executing a given workflow.', 'properties': {'tags': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_engine_parameters': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_params': {'description': 'REQUIRED\nThe workflow run parameterizations (JSON encoded), including input and output file locations', 'type': 'object'}, 'workflow_type': {'description': 'REQUIRED\nThe workflow descriptor type, must be "CWL" or "WDL" currently (or another alternative supported by this WES instance)', 'type': 'string'}, 'workflow_type_version': {'description': 'REQUIRED\nThe workflow descriptor type version, must be one supported by this WES instance', 'type': 'string'}, 'workflow_url': {'description': 'REQUIRED\nThe workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.', 'type': 'string'}}, 'title': 'RunRequest', 'type': 'object'}, 'run_id': {'description': 'workflow run ID', 'type': 'string'}, 'run_log': {'description': 'Log and other info', 'properties': {'cmd': {'description': 'The command line that was executed', 'items': {'type': 'string'}, 'type': 'array'}, 'end_time': {'description': 'When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'exit_code': {'description': 'Exit code of the program', 'format': 'int32', 'type': 'integer'}, 'name': {'description': 'The task or workflow name', 'type': 'string'}, 'start_time': {'description': 'When the command started executing, in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'stderr': {'description': 'A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}, 'stdout': {'description': 'A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}}, 'title': 'Log', 'type': 'object'}, 'state': {'description': "- UNKNOWN: The state of the task is unknown. This provides a safe default for messages where this field is missing, for example, so that a missing field does not accidentally imply that the state is QUEUED.\n\n\n - QUEUED: The task is queued.\n\n\n- INITIALIZING: The task has been assigned to a worker and is currently preparing to run. For example, the worker may be turning on, downloading input files, etc.\n\n- RUNNING: The task is running. Input files are downloaded and the first Executor has been started.\n\n- PAUSED: The task is paused. An implementation may have the ability to pause a task, but this is not required.\n\n\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n\n\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n\n\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out of disk space, etc.\n\n\n - CANCELED: The task was canceled by the user.\n\n\n  - CANCELING: The task was canceled by the user, and is in the process of stopping.", 'enum': ['UNKNOWN', 'QUEUED', 'INITIALIZING', 'RUNNING', 'PAUSED', 'COMPLETE', 'EXECUTOR_ERROR', 'SYSTEM_ERROR', 'CANCELED', 'CANCELING'], 'title': 'State', 'type': 'string'}, 'task_logs': {'description': 'The logs, and other key info like timing and exit code, for each step in the workflow run.', 'items': {'description': 'Log and other info', 'properties': {'cmd': {'description': 'The command line that was executed', 'items': {'type': 'string'}, 'type': 'array'}, 'end_time': {'description': 'When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'exit_code': {'description': 'Exit code of the program', 'format': 'int32', 'type': 'integer'}, 'name': {'description': 'The task or workflow name', 'type': 'string'}, 'start_time': {'description': 'When the command started executing, in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'stderr': {'description': 'A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}, 'stdout': {'description': 'A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}}, 'title': 'Log', 'type': 'object'}, 'type': 'array'}}, 'title': 'RunLog', 'type': 'object'}, 'RunRequest': {'description': 'To execute a workflow, send a run request including all the details needed to begin downloading\nand executing a given workflow.', 'properties': {'tags': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_engine_parameters': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_params': {'description': 'REQUIRED\nThe workflow run parameterizations (JSON encoded), including input and output file locations', 'type': 'object'}, 'workflow_type': {'description': 'REQUIRED\nThe workflow descriptor type, must be "CWL" or "WDL" currently (or another alternative supported by this WES instance)', 'type': 'string'}, 'workflow_type_version': {'description': 'REQUIRED\nThe workflow descriptor type version, must be one supported by this WES instance', 'type': 'string'}, 'workflow_url': {'description': 'REQUIRED\nThe workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.', 'type': 'string'}}, 'title': 'RunRequest', 'type': 'object'}, 'RunStatus': {'description': 'Small description of a workflow run, returned by server during listing', 'properties': {'run_id': {'type': 'string'}, 'state': {'description': "- UNKNOWN: The state of the task is unknown. This provides a safe default for messages where this field is missing, for example, so that a missing field does not accidentally imply that the state is QUEUED.\n\n\n - QUEUED: The task is queued.\n\n\n- INITIALIZING: The task has been assigned to a worker and is currently preparing to run. For example, the worker may be turning on, downloading input files, etc.\n\n- RUNNING: The task is running. Input files are downloaded and the first Executor has been started.\n\n- PAUSED: The task is paused. An implementation may have the ability to pause a task, but this is not required.\n\n\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n\n\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n\n\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out of disk space, etc.\n\n\n - CANCELED: The task was canceled by the user.\n\n\n  - CANCELING: The task was canceled by the user, and is in the process of stopping.", 'enum': ['UNKNOWN', 'QUEUED', 'INITIALIZING', 'RUNNING', 'PAUSED', 'COMPLETE', 'EXECUTOR_ERROR', 'SYSTEM_ERROR', 'CANCELED', 'CANCELING'], 'title': 'State', 'type': 'string'}}, 'required': ['run_id'], 'title': 'RunStatus', 'type': 'object'}, 'ServiceInfo': {'allOf': [{'description': 'GA4GH service', 'type': 'object', 'required': ['id', 'name', 'type', 'organization', 'version'], 'properties': {'id': {'type': 'string', 'description': 'Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.', 'example': 'org.ga4gh.myservice'}, 'name': {'type': 'string', 'description': 'Name of this service. Should be human readable.', 'example': 'My project'}, 'type': {'$ref': '#/components/schemas/ServiceType'}, 'description': {'type': 'string', 'description': 'Description of the service. Should be human readable and provide information about the service.', 'example': 'This service provides...'}, 'organization': {'type': 'object', 'description': 'Organization providing the service', 'required': ['name', 'url'], 'properties': {'name': {'type': 'string', 'description': 'Name of the organization responsible for the service', 'example': 'My organization'}, 'url': {'type': 'string', 'format': 'uri', 'description': 'URL of the website of the organization (RFC 3986 format)', 'example': 'https://example.com'}}}, 'contactUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).', 'example': 'mailto:support@example.com'}, 'documentationUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.', 'example': 'https://docs.myservice.example.com'}, 'createdAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was first deployed and available (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'updatedAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was last updated (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'environment': {'type': 'string', 'description': 'Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.', 'example': 'test'}, 'version': {'type': 'string', 'description': 'Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.', 'example': '1.0.0'}}}, {'properties': {'auth_instructions_url': {'description': 'A web page URL with human-readable instructions on how to get an authorization token for use with a specific WES endpoint.', 'type': 'string'}, 'default_workflow_engine_parameters': {'description': 'Each workflow engine can present additional parameters that can be sent to the workflow engine. This message will list the default values, and their types for each workflow engine.', 'items': {'description': 'A message that allows one to describe default parameters for a workflow engine.', 'properties': {'default_value': {'description': 'The stringified version of the default parameter. e.g. "2.45".', 'type': 'string'}, 'name': {'description': 'The name of the parameter', 'type': 'string'}, 'type': {'description': 'Describes the type of the parameter, e.g. float.', 'type': 'string'}}, 'title': 'DefaultWorkflowEngineParameter', 'type': 'object'}, 'type': 'array'}, 'supported_filesystem_protocols': {'description': "The filesystem protocols supported by this service, currently these may include common protocols using the terms 'http', 'https', 'sftp', 's3', 'gs', 'file', or 'synapse', but others  are possible and the terms beyond these core protocols are currently not fixed.   This section reports those protocols (either common or not) supported by this WES service.", 'items': {'type': 'string'}, 'type': 'array'}, 'supported_wes_versions': {'description': 'The version(s) of the WES schema supported by this service', 'items': {'type': 'string'}, 'type': 'array'}, 'system_state_counts': {'additionalProperties': {'format': 'int64', 'type': 'integer'}, 'type': 'object'}, 'tags': {'additionalProperties': {'description': 'A message containing useful information about the running service, including supported versions and default settings.', 'type': 'string'}, 'type': 'object'}, 'workflow_engine_versions': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_type_versions': {'additionalProperties': {'description': 'Available workflow types supported by a given instance of the service.', 'properties': {'workflow_type_version': {'description': 'an array of one or more acceptable types for the `workflow_type`', 'items': {'type': 'string'}, 'type': 'array'}}, 'title': 'WorkflowTypeVersion', 'type': 'object'}, 'type': 'object'}}, 'required': ['workflow_type_versions', 'supported_wes_versions', 'supported_filesystem_protocols', 'workflow_engine_versions', 'default_workflow_engine_parameters', 'system_state_counts', 'auth_instructions_url', 'tags'], 'type': 'object'}], 'title': 'ServiceInfo'}, 'ServiceInfoRegister': {'allOf': [{'description': 'GA4GH service', 'type': 'object', 'required': ['id', 'name', 'type', 'organization', 'version'], 'properties': {'id': {'type': 'string', 'description': 'Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.', 'example': 'org.ga4gh.myservice'}, 'name': {'type': 'string', 'description': 'Name of this service. Should be human readable.', 'example': 'My project'}, 'type': {'$ref': '#/components/schemas/ServiceType'}, 'description': {'type': 'string', 'description': 'Description of the service. Should be human readable and provide information about the service.', 'example': 'This service provides...'}, 'organization': {'type': 'object', 'description': 'Organization providing the service', 'required': ['name', 'url'], 'properties': {'name': {'type': 'string', 'description': 'Name of the organization responsible for the service', 'example': 'My organization'}, 'url': {'type': 'string', 'format': 'uri', 'description': 'URL of the website of the organization (RFC 3986 format)', 'example': 'https://example.com'}}}, 'contactUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).', 'example': 'mailto:support@example.com'}, 'documentationUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.', 'example': 'https://docs.myservice.example.com'}, 'createdAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was first deployed and available (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'updatedAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was last updated (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'environment': {'type': 'string', 'description': 'Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.', 'example': 'test'}, 'version': {'type': 'string', 'description': 'Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.', 'example': '1.0.0'}}}, {'properties': {'auth_instructions_url': {'description': 'A web page URL with human-readable instructions on how to get an authorization token for use with a specific WES endpoint.', 'type': 'string'}, 'default_workflow_engine_parameters': {'description': 'Each workflow engine can present additional parameters that can be sent to the workflow engine. This message will list the default values, and their types for each workflow engine.', 'items': {'description': 'A message that allows one to describe default parameters for a workflow engine.', 'properties': {'default_value': {'description': 'The stringified version of the default parameter. e.g. "2.45".', 'type': 'string'}, 'name': {'description': 'The name of the parameter', 'type': 'string'}, 'type': {'description': 'Describes the type of the parameter, e.g. float.', 'type': 'string'}}, 'title': 'DefaultWorkflowEngineParameter', 'type': 'object'}, 'type': 'array'}, 'supported_filesystem_protocols': {'description': "The filesystem protocols supported by this service, currently these may include common protocols using the terms 'http', 'https', 'sftp', 's3', 'gs', 'file', or 'synapse', but others  are possible and the terms beyond these core protocols are currently not fixed.   This section reports those protocols (either common or not) supported by this WES service.", 'items': {'type': 'string'}, 'type': 'array'}, 'supported_wes_versions': {'description': 'The version(s) of the WES schema supported by this service', 'items': {'type': 'string'}, 'type': 'array'}, 'tags': {'additionalProperties': {'description': 'A message containing useful information about the running service, including supported versions and default settings.', 'type': 'string'}, 'type': 'object'}, 'workflow_engine_versions': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_type_versions': {'additionalProperties': {'description': 'Available workflow types supported by a given instance of the service.', 'properties': {'workflow_type_version': {'description': 'an array of one or more acceptable types for the `workflow_type`', 'items': {'type': 'string'}, 'type': 'array'}}, 'title': 'WorkflowTypeVersion', 'type': 'object'}, 'type': 'object'}}, 'required': ['workflow_type_versions', 'supported_wes_versions', 'supported_filesystem_protocols', 'workflow_engine_versions', 'default_workflow_engine_parameters', 'auth_instructions_url', 'tags'], 'type': 'object'}], 'title': 'ServiceInfoRegister'}, 'State': {'description': "- UNKNOWN: The state of the task is unknown. This provides a safe default for messages where this field is missing, for example, so that a missing field does not accidentally imply that the state is QUEUED.\n\n\n - QUEUED: The task is queued.\n\n\n- INITIALIZING: The task has been assigned to a worker and is currently preparing to run. For example, the worker may be turning on, downloading input files, etc.\n\n- RUNNING: The task is running. Input files are downloaded and the first Executor has been started.\n\n- PAUSED: The task is paused. An implementation may have the ability to pause a task, but this is not required.\n\n\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n\n\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n\n\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out of disk space, etc.\n\n\n - CANCELED: The task was canceled by the user.\n\n\n  - CANCELING: The task was canceled by the user, and is in the process of stopping.", 'enum': ['UNKNOWN', 'QUEUED', 'INITIALIZING', 'RUNNING', 'PAUSED', 'COMPLETE', 'EXECUTOR_ERROR', 'SYSTEM_ERROR', 'CANCELED', 'CANCELING'], 'title': 'State', 'type': 'string'}, 'WorkflowTypeVersion': {'description': 'Available workflow types supported by a given instance of the service.', 'properties': {'workflow_type_version': {'description': 'an array of one or more acceptable types for the `workflow_type`', 'items': {'type': 'string'}, 'type': 'array'}}, 'title': 'WorkflowTypeVersion', 'type': 'object'}}}}\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.10/site-packages/flask/app.py", line 1823, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "/usr/local/lib/python3.10/site-packages/flask/app.py", line 1799, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/decorator.py", line 68, in wrapper\n    response = function(request)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/uri_parsing.py", line 149, in wrapper\n    response = function(request)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/validation.py", line 170, in wrapper\n    self.validate_schema(data, request.url)\n  File "/usr/local/lib/python3.10/site-packages/connexion/decorators/validation.py", line 213, in validate_schema\n    self.validator.validate(data)\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/validators.py", line 434, in validate\n    for error in self.iter_errors(*args, **kwargs):\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/validators.py", line 368, in iter_errors\n    for error in errors:\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/_validators.py", line 335, in allOf\n    yield from validator.descend(instance, subschema, schema_path=index)\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/validators.py", line 416, in descend\n    for error in errors:\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/_validators.py", line 305, in properties\n    yield from validator.descend(\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/validators.py", line 416, in descend\n    for error in errors:\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/_validators.py", line 284, in ref\n    yield from validator._validate_reference(ref=ref, instance=instance)\n  File "/usr/local/lib/python3.10/site-packages/jsonschema/validators.py", line 448, in _validate_reference\n    raise exceptions._WrappedReferencingError(err)\njsonschema.exceptions._WrappedReferencingError: PointerToNowhere: '/components/schemas/ServiceType' does not exist within {'x-body-name': 'service_info', 'allOf': [{'description': 'GA4GH service', 'type': 'object', 'required': ['id', 'name', 'type', 'organization', 'version'], 'properties': {'id': {'type': 'string', 'description': 'Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.', 'example': 'org.ga4gh.myservice'}, 'name': {'type': 'string', 'description': 'Name of this service. Should be human readable.', 'example': 'My project'}, 'type': {'$ref': '#/components/schemas/ServiceType'}, 'description': {'type': 'string', 'description': 'Description of the service. Should be human readable and provide information about the service.', 'example': 'This service provides...'}, 'organization': {'type': 'object', 'description': 'Organization providing the service', 'required': ['name', 'url'], 'properties': {'name': {'type': 'string', 'description': 'Name of the organization responsible for the service', 'example': 'My organization'}, 'url': {'type': 'string', 'format': 'uri', 'description': 'URL of the website of the organization (RFC 3986 format)', 'example': 'https://example.com'}}}, 'contactUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).', 'example': 'mailto:support@example.com'}, 'documentationUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.', 'example': 'https://docs.myservice.example.com'}, 'createdAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was first deployed and available (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'updatedAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was last updated (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'environment': {'type': 'string', 'description': 'Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.', 'example': 'test'}, 'version': {'type': 'string', 'description': 'Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.', 'example': '1.0.0'}}}, {'properties': {'auth_instructions_url': {'description': 'A web page URL with human-readable instructions on how to get an authorization token for use with a specific WES endpoint.', 'type': 'string'}, 'default_workflow_engine_parameters': {'description': 'Each workflow engine can present additional parameters that can be sent to the workflow engine. This message will list the default values, and their types for each workflow engine.', 'items': {'description': 'A message that allows one to describe default parameters for a workflow engine.', 'properties': {'default_value': {'description': 'The stringified version of the default parameter. e.g. "2.45".', 'type': 'string'}, 'name': {'description': 'The name of the parameter', 'type': 'string'}, 'type': {'description': 'Describes the type of the parameter, e.g. float.', 'type': 'string'}}, 'title': 'DefaultWorkflowEngineParameter', 'type': 'object'}, 'type': 'array'}, 'supported_filesystem_protocols': {'description': "The filesystem protocols supported by this service, currently these may include common protocols using the terms 'http', 'https', 'sftp', 's3', 'gs', 'file', or 'synapse', but others  are possible and the terms beyond these core protocols are currently not fixed.   This section reports those protocols (either common or not) supported by this WES service.", 'items': {'type': 'string'}, 'type': 'array'}, 'supported_wes_versions': {'description': 'The version(s) of the WES schema supported by this service', 'items': {'type': 'string'}, 'type': 'array'}, 'tags': {'additionalProperties': {'description': 'A message containing useful information about the running service, including supported versions and default settings.', 'type': 'string'}, 'type': 'object'}, 'workflow_engine_versions': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_type_versions': {'additionalProperties': {'description': 'Available workflow types supported by a given instance of the service.', 'properties': {'workflow_type_version': {'description': 'an array of one or more acceptable types for the `workflow_type`', 'items': {'type': 'string'}, 'type': 'array'}}, 'title': 'WorkflowTypeVersion', 'type': 'object'}, 'type': 'object'}}, 'required': ['workflow_type_versions', 'supported_wes_versions', 'supported_filesystem_protocols', 'workflow_engine_versions', 'default_workflow_engine_parameters', 'auth_instructions_url', 'tags'], 'type': 'object'}], 'title': 'ServiceInfoRegister', 'components': {'schemas': {'DefaultWorkflowEngineParameter': {'description': 'A message that allows one to describe default parameters for a workflow engine.', 'properties': {'default_value': {'description': 'The stringified version of the default parameter. e.g. "2.45".', 'type': 'string'}, 'name': {'description': 'The name of the parameter', 'type': 'string'}, 'type': {'description': 'Describes the type of the parameter, e.g. float.', 'type': 'string'}}, 'title': 'DefaultWorkflowEngineParameter', 'type': 'object'}, 'ErrorResponse': {'description': 'An object that can optionally include information about the error.', 'properties': {'msg': {'description': 'A detailed error message.', 'type': 'string'}, 'status_code': {'description': 'The integer representing the HTTP status code (e.g. 200, 404).', 'format': 'int32', 'type': 'integer'}}, 'title': 'ErrorResponse', 'type': 'object'}, 'Log': {'description': 'Log and other info', 'properties': {'cmd': {'description': 'The command line that was executed', 'items': {'type': 'string'}, 'type': 'array'}, 'end_time': {'description': 'When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'exit_code': {'description': 'Exit code of the program', 'format': 'int32', 'type': 'integer'}, 'name': {'description': 'The task or workflow name', 'type': 'string'}, 'start_time': {'description': 'When the command started executing, in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'stderr': {'description': 'A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}, 'stdout': {'description': 'A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}}, 'title': 'Log', 'type': 'object'}, 'RunId': {'properties': {'run_id': {'description': 'workflow run ID', 'type': 'string'}}, 'title': 'RunId', 'type': 'object'}, 'RunListResponse': {'description': 'The service will return a RunListResponse when receiving a successful RunListRequest.', 'properties': {'next_page_token': {'description': 'A token which may be supplied as `page_token` in workflow run list request to get the next page of results.  An empty string indicates there are no more items to return.', 'type': 'string'}, 'runs': {'description': 'A list of workflow runs that the service has executed or is executing. The list is filtered to only include runs that the caller has permission to see.', 'items': {'description': 'Small description of a workflow run, returned by server during listing', 'properties': {'run_id': {'type': 'string'}, 'state': {'description': "- UNKNOWN: The state of the task is unknown. This provides a safe default for messages where this field is missing, for example, so that a missing field does not accidentally imply that the state is QUEUED.\n\n\n - QUEUED: The task is queued.\n\n\n- INITIALIZING: The task has been assigned to a worker and is currently preparing to run. For example, the worker may be turning on, downloading input files, etc.\n\n- RUNNING: The task is running. Input files are downloaded and the first Executor has been started.\n\n- PAUSED: The task is paused. An implementation may have the ability to pause a task, but this is not required.\n\n\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n\n\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n\n\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out of disk space, etc.\n\n\n - CANCELED: The task was canceled by the user.\n\n\n  - CANCELING: The task was canceled by the user, and is in the process of stopping.", 'enum': ['UNKNOWN', 'QUEUED', 'INITIALIZING', 'RUNNING', 'PAUSED', 'COMPLETE', 'EXECUTOR_ERROR', 'SYSTEM_ERROR', 'CANCELED', 'CANCELING'], 'title': 'State', 'type': 'string'}}, 'required': ['run_id'], 'title': 'RunStatus', 'type': 'object'}, 'type': 'array'}}, 'title': 'RunListResponse', 'type': 'object'}, 'RunLog': {'properties': {'outputs': {'description': 'The outputs from the workflow run.', 'type': 'object'}, 'request': {'description': 'To execute a workflow, send a run request including all the details needed to begin downloading\nand executing a given workflow.', 'properties': {'tags': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_engine_parameters': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_params': {'description': 'REQUIRED\nThe workflow run parameterizations (JSON encoded), including input and output file locations', 'type': 'object'}, 'workflow_type': {'description': 'REQUIRED\nThe workflow descriptor type, must be "CWL" or "WDL" currently (or another alternative supported by this WES instance)', 'type': 'string'}, 'workflow_type_version': {'description': 'REQUIRED\nThe workflow descriptor type version, must be one supported by this WES instance', 'type': 'string'}, 'workflow_url': {'description': 'REQUIRED\nThe workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.', 'type': 'string'}}, 'title': 'RunRequest', 'type': 'object'}, 'run_id': {'description': 'workflow run ID', 'type': 'string'}, 'run_log': {'description': 'Log and other info', 'properties': {'cmd': {'description': 'The command line that was executed', 'items': {'type': 'string'}, 'type': 'array'}, 'end_time': {'description': 'When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'exit_code': {'description': 'Exit code of the program', 'format': 'int32', 'type': 'integer'}, 'name': {'description': 'The task or workflow name', 'type': 'string'}, 'start_time': {'description': 'When the command started executing, in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'stderr': {'description': 'A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}, 'stdout': {'description': 'A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}}, 'title': 'Log', 'type': 'object'}, 'state': {'description': "- UNKNOWN: The state of the task is unknown. This provides a safe default for messages where this field is missing, for example, so that a missing field does not accidentally imply that the state is QUEUED.\n\n\n - QUEUED: The task is queued.\n\n\n- INITIALIZING: The task has been assigned to a worker and is currently preparing to run. For example, the worker may be turning on, downloading input files, etc.\n\n- RUNNING: The task is running. Input files are downloaded and the first Executor has been started.\n\n- PAUSED: The task is paused. An implementation may have the ability to pause a task, but this is not required.\n\n\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n\n\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n\n\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out of disk space, etc.\n\n\n - CANCELED: The task was canceled by the user.\n\n\n  - CANCELING: The task was canceled by the user, and is in the process of stopping.", 'enum': ['UNKNOWN', 'QUEUED', 'INITIALIZING', 'RUNNING', 'PAUSED', 'COMPLETE', 'EXECUTOR_ERROR', 'SYSTEM_ERROR', 'CANCELED', 'CANCELING'], 'title': 'State', 'type': 'string'}, 'task_logs': {'description': 'The logs, and other key info like timing and exit code, for each step in the workflow run.', 'items': {'description': 'Log and other info', 'properties': {'cmd': {'description': 'The command line that was executed', 'items': {'type': 'string'}, 'type': 'array'}, 'end_time': {'description': 'When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'exit_code': {'description': 'Exit code of the program', 'format': 'int32', 'type': 'integer'}, 'name': {'description': 'The task or workflow name', 'type': 'string'}, 'start_time': {'description': 'When the command started executing, in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"', 'type': 'string'}, 'stderr': {'description': 'A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}, 'stdout': {'description': 'A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.', 'type': 'string'}}, 'title': 'Log', 'type': 'object'}, 'type': 'array'}}, 'title': 'RunLog', 'type': 'object'}, 'RunRequest': {'description': 'To execute a workflow, send a run request including all the details needed to begin downloading\nand executing a given workflow.', 'properties': {'tags': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_engine_parameters': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_params': {'description': 'REQUIRED\nThe workflow run parameterizations (JSON encoded), including input and output file locations', 'type': 'object'}, 'workflow_type': {'description': 'REQUIRED\nThe workflow descriptor type, must be "CWL" or "WDL" currently (or another alternative supported by this WES instance)', 'type': 'string'}, 'workflow_type_version': {'description': 'REQUIRED\nThe workflow descriptor type version, must be one supported by this WES instance', 'type': 'string'}, 'workflow_url': {'description': 'REQUIRED\nThe workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.', 'type': 'string'}}, 'title': 'RunRequest', 'type': 'object'}, 'RunStatus': {'description': 'Small description of a workflow run, returned by server during listing', 'properties': {'run_id': {'type': 'string'}, 'state': {'description': "- UNKNOWN: The state of the task is unknown. This provides a safe default for messages where this field is missing, for example, so that a missing field does not accidentally imply that the state is QUEUED.\n\n\n - QUEUED: The task is queued.\n\n\n- INITIALIZING: The task has been assigned to a worker and is currently preparing to run. For example, the worker may be turning on, downloading input files, etc.\n\n- RUNNING: The task is running. Input files are downloaded and the first Executor has been started.\n\n- PAUSED: The task is paused. An implementation may have the ability to pause a task, but this is not required.\n\n\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n\n\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n\n\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out of disk space, etc.\n\n\n - CANCELED: The task was canceled by the user.\n\n\n  - CANCELING: The task was canceled by the user, and is in the process of stopping.", 'enum': ['UNKNOWN', 'QUEUED', 'INITIALIZING', 'RUNNING', 'PAUSED', 'COMPLETE', 'EXECUTOR_ERROR', 'SYSTEM_ERROR', 'CANCELED', 'CANCELING'], 'title': 'State', 'type': 'string'}}, 'required': ['run_id'], 'title': 'RunStatus', 'type': 'object'}, 'ServiceInfo': {'allOf': [{'description': 'GA4GH service', 'type': 'object', 'required': ['id', 'name', 'type', 'organization', 'version'], 'properties': {'id': {'type': 'string', 'description': 'Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.', 'example': 'org.ga4gh.myservice'}, 'name': {'type': 'string', 'description': 'Name of this service. Should be human readable.', 'example': 'My project'}, 'type': {'$ref': '#/components/schemas/ServiceType'}, 'description': {'type': 'string', 'description': 'Description of the service. Should be human readable and provide information about the service.', 'example': 'This service provides...'}, 'organization': {'type': 'object', 'description': 'Organization providing the service', 'required': ['name', 'url'], 'properties': {'name': {'type': 'string', 'description': 'Name of the organization responsible for the service', 'example': 'My organization'}, 'url': {'type': 'string', 'format': 'uri', 'description': 'URL of the website of the organization (RFC 3986 format)', 'example': 'https://example.com'}}}, 'contactUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).', 'example': 'mailto:support@example.com'}, 'documentationUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.', 'example': 'https://docs.myservice.example.com'}, 'createdAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was first deployed and available (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'updatedAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was last updated (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'environment': {'type': 'string', 'description': 'Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.', 'example': 'test'}, 'version': {'type': 'string', 'description': 'Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.', 'example': '1.0.0'}}}, {'properties': {'auth_instructions_url': {'description': 'A web page URL with human-readable instructions on how to get an authorization token for use with a specific WES endpoint.', 'type': 'string'}, 'default_workflow_engine_parameters': {'description': 'Each workflow engine can present additional parameters that can be sent to the workflow engine. This message will list the default values, and their types for each workflow engine.', 'items': {'description': 'A message that allows one to describe default parameters for a workflow engine.', 'properties': {'default_value': {'description': 'The stringified version of the default parameter. e.g. "2.45".', 'type': 'string'}, 'name': {'description': 'The name of the parameter', 'type': 'string'}, 'type': {'description': 'Describes the type of the parameter, e.g. float.', 'type': 'string'}}, 'title': 'DefaultWorkflowEngineParameter', 'type': 'object'}, 'type': 'array'}, 'supported_filesystem_protocols': {'description': "The filesystem protocols supported by this service, currently these may include common protocols using the terms 'http', 'https', 'sftp', 's3', 'gs', 'file', or 'synapse', but others  are possible and the terms beyond these core protocols are currently not fixed.   This section reports those protocols (either common or not) supported by this WES service.", 'items': {'type': 'string'}, 'type': 'array'}, 'supported_wes_versions': {'description': 'The version(s) of the WES schema supported by this service', 'items': {'type': 'string'}, 'type': 'array'}, 'system_state_counts': {'additionalProperties': {'format': 'int64', 'type': 'integer'}, 'type': 'object'}, 'tags': {'additionalProperties': {'description': 'A message containing useful information about the running service, including supported versions and default settings.', 'type': 'string'}, 'type': 'object'}, 'workflow_engine_versions': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_type_versions': {'additionalProperties': {'description': 'Available workflow types supported by a given instance of the service.', 'properties': {'workflow_type_version': {'description': 'an array of one or more acceptable types for the `workflow_type`', 'items': {'type': 'string'}, 'type': 'array'}}, 'title': 'WorkflowTypeVersion', 'type': 'object'}, 'type': 'object'}}, 'required': ['workflow_type_versions', 'supported_wes_versions', 'supported_filesystem_protocols', 'workflow_engine_versions', 'default_workflow_engine_parameters', 'system_state_counts', 'auth_instructions_url', 'tags'], 'type': 'object'}], 'title': 'ServiceInfo'}, 'ServiceInfoRegister': {'allOf': [{'description': 'GA4GH service', 'type': 'object', 'required': ['id', 'name', 'type', 'organization', 'version'], 'properties': {'id': {'type': 'string', 'description': 'Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.', 'example': 'org.ga4gh.myservice'}, 'name': {'type': 'string', 'description': 'Name of this service. Should be human readable.', 'example': 'My project'}, 'type': {'$ref': '#/components/schemas/ServiceType'}, 'description': {'type': 'string', 'description': 'Description of the service. Should be human readable and provide information about the service.', 'example': 'This service provides...'}, 'organization': {'type': 'object', 'description': 'Organization providing the service', 'required': ['name', 'url'], 'properties': {'name': {'type': 'string', 'description': 'Name of the organization responsible for the service', 'example': 'My organization'}, 'url': {'type': 'string', 'format': 'uri', 'description': 'URL of the website of the organization (RFC 3986 format)', 'example': 'https://example.com'}}}, 'contactUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).', 'example': 'mailto:support@example.com'}, 'documentationUrl': {'type': 'string', 'format': 'uri', 'description': 'URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.', 'example': 'https://docs.myservice.example.com'}, 'createdAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was first deployed and available (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'updatedAt': {'type': 'string', 'format': 'date-time', 'description': 'Timestamp describing when the service was last updated (RFC 3339 format)', 'example': '2019-06-04T12:58:19Z'}, 'environment': {'type': 'string', 'description': 'Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.', 'example': 'test'}, 'version': {'type': 'string', 'description': 'Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.', 'example': '1.0.0'}}}, {'properties': {'auth_instructions_url': {'description': 'A web page URL with human-readable instructions on how to get an authorization token for use with a specific WES endpoint.', 'type': 'string'}, 'default_workflow_engine_parameters': {'description': 'Each workflow engine can present additional parameters that can be sent to the workflow engine. This message will list the default values, and their types for each workflow engine.', 'items': {'description': 'A message that allows one to describe default parameters for a workflow engine.', 'properties': {'default_value': {'description': 'The stringified version of the default parameter. e.g. "2.45".', 'type': 'string'}, 'name': {'description': 'The name of the parameter', 'type': 'string'}, 'type': {'description': 'Describes the type of the parameter, e.g. float.', 'type': 'string'}}, 'title': 'DefaultWorkflowEngineParameter', 'type': 'object'}, 'type': 'array'}, 'supported_filesystem_protocols': {'description': "The filesystem protocols supported by this service, currently these may include common protocols using the terms 'http', 'https', 'sftp', 's3', 'gs', 'file', or 'synapse', but others  are possible and the terms beyond these core protocols are currently not fixed.   This section reports those protocols (either common or not) supported by this WES service.", 'items': {'type': 'string'}, 'type': 'array'}, 'supported_wes_versions': {'description': 'The version(s) of the WES schema supported by this service', 'items': {'type': 'string'}, 'type': 'array'}, 'tags': {'additionalProperties': {'description': 'A message containing useful information about the running service, including supported versions and default settings.', 'type': 'string'}, 'type': 'object'}, 'workflow_engine_versions': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'workflow_type_versions': {'additionalProperties': {'description': 'Available workflow types supported by a given instance of the service.', 'properties': {'workflow_type_version': {'description': 'an array of one or more acceptable types for the `workflow_type`', 'items': {'type': 'string'}, 'type': 'array'}}, 'title': 'WorkflowTypeVersion', 'type': 'object'}, 'type': 'object'}}, 'required': ['workflow_type_versions', 'supported_wes_versions', 'supported_filesystem_protocols', 'workflow_engine_versions', 'default_workflow_engine_parameters', 'auth_instructions_url', 'tags'], 'type': 'object'}], 'title': 'ServiceInfoRegister'}, 'State': {'description': "- UNKNOWN: The state of the task is unknown. This provides a safe default for messages where this field is missing, for example, so that a missing field does not accidentally imply that the state is QUEUED.\n\n\n - QUEUED: The task is queued.\n\n\n- INITIALIZING: The task has been assigned to a worker and is currently preparing to run. For example, the worker may be turning on, downloading input files, etc.\n\n- RUNNING: The task is running. Input files are downloaded and the first Executor has been started.\n\n- PAUSED: The task is paused. An implementation may have the ability to pause a task, but this is not required.\n\n\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n\n\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n\n\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out of disk space, etc.\n\n\n - CANCELED: The task was canceled by the user.\n\n\n  - CANCELING: The task was canceled by the user, and is in the process of stopping.", 'enum': ['UNKNOWN', 'QUEUED', 'INITIALIZING', 'RUNNING', 'PAUSED', 'COMPLETE', 'EXECUTOR_ERROR', 'SYSTEM_ERROR', 'CANCELED', 'CANCELING'], 'title': 'State', 'type': 'string'}, 'WorkflowTypeVersion': {'description': 'Available workflow types supported by a given instance of the service.', 'properties': {'workflow_type_version': {'description': 'an array of one or more acceptable types for the `workflow_type`', 'items': {'type': 'string'}, 'type': 'array'}}, 'title': 'WorkflowTypeVersion', 'type': 'object'}}}} [foca.errors.exceptions]
